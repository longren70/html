<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>FileReader的使用</title>
</head>

<body>
    <!-- 需求：即时预览：用户选择完图片后立即进行图片预览处理，用 onchange 事件；通过文件读取对象的readAsDataURL()完成。-->
    <form action="">
        文件：<input type="file" name="myFile" id="myFile" onchange="getFileContent();"> <br>
        <input type="submit">
    </form>

    <!-- 这里的src不用给出具体的路径，由js加载readAsDataURL()中的result中得到-->
    <img id="myImg" src="" alt="">


    <script>
        /*
                                                                    FileReader:读取文件内容
                                                                    1.readAsText(): 读取文本文件（可以使用txt打开的文件），返回文本字符串，默认编码是UTF-8.
                                                                    2.readAsBinaryString(): 读取任意类型的文件，返回二进制字符串。这个方法不是用来读取文件展示给用户看，而是存储文件。
                                                                        例如：读取文件的内容，获取二进制数据，传递给后台，吼他接收了数据之后，再将数据存储。
                                                                    3.readAsDataURL(): 读取文件，获取一段以data开头的字符串，这段字符串的本质就是DataURL。  
                                                                        DataURL是一种将文件（这个文件一般就是指图像或者能够嵌入发哦文档的文件格式）前日到文档的方案。
                                                                        DataURL是将资源转换为base64编码的字符串形式，并且将这些内容直接存储在url中>>>以优化网站的加载速度和执行效率。
                                                                    */
        function getFileContent() {
            // 1.创建一个文件读取对象
            var reader = new FileReader();

            /*
            2.读取文件，获取DataURL
            2.1 void：说明没有任何的返回值，但是读取完文件之后，它会将读取的结果存储在文件读取对象的result中。
            2.2 需要传递一个参数binary large object:文件（图片或者其他可以嵌入到文档的类型）
            2.3 文件存储在file表单元素的files属性中，它是一个数组
            */
            var file = document.querySelector("#myFile").files;
            reader.readAsDataURL(file[0]);
            /*
            获取数据：
            FileReader提供一个完整的事件模型，用来捕获读取文件时的状态
            onabort: 读取文件中断时触发
            onerror: 读取错误时触发
            onload: 文件读取成功完成时触发
            onloadend: 文件读取完成时触发，无论成功还是失败
            onloadstart: 开始读取时触发
            onprogress: 读取文件过程汇中持续触发
            */
            reader.onload = function() {
                //console.log(reader.result);
                document.querySelector("#myImg").src = reader.result;
            }

        }
    </script>

</body>

</html>
