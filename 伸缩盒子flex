<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>伸缩盒子</title>
    <style>
        * {
            padding: 0;
            margin: 0;
        }
        
        .box {
            width: 1000px;
            height: 200px;
            margin: 100px auto;
            border: deeppink 1px solid;
            box-sizing: border-box;
            display: flex;
            /* 设置父容器为伸缩盒子：会使每一个子元素自动变为伸缩项 */
            justify-content: space-around;
            /* 参数：center(让子元素从父元素的中间位置开始排列)，start(让子元素从父元素的开始位置开始排列)，end(让子元素从父元素的结束位置开始排列)，
                space-between(左右对齐父容器的开始和结束，中间平均分隔)，space-around(将多余的空间平均分隔在子元素的两边，相当于margin:0 auto)，
            */
        }
        
        .first {
            width: 200px;
            height: 200px;
            background-color: red;
        }
        
        .second {
            width: 200px;
            height: 200px;
            background-color: #ffee11;
        }
        
        .third {
            width: 200px;
            height: 200px;
            background-color: #662233;
        }
        
        .fourth {
            width: 200px;
            height: 200px;
            background-color: blue;
        }
        
        .fifth {
            width: 200px;
            height: 200px;
            background-color: green;
        }
        
        .box2 {
            width: 900px;
            height: 600px;
            margin: 20px auto;
            border: deeppink 1px solid;
            box-sizing: border-box;
            display: flex;
            /* 设置父容器为伸缩盒子：会使每一个子元素自动变为伸缩项 */
            justify-content: space-around;
            /* 设置子元素在主轴方向上的排列方式。参数：center(让子元素从父元素的中间位置开始排列)，start(让子元素从父元素的开始位置开始排列)，end(让子元素从父元素的结束位置开始排列)，
                space-between(左右对齐父容器的开始和结束，中间平均分隔)，space-around(将多余的空间平均分隔在子元素的两边，相当于margin:0 auto)，
            */
            flex-wrap: wrap;
            /* flex-wrap控制子元素是否换行。nowrap默认不换行，wrap换行，wrap-reverse翻转（翻转后从下到上排列） */
            flex-direction: column;
            /* flex-direction:设置子元素排列方向。row默认主轴水平方向，column为主轴垂直方向 */
            /* flex-low:row wrap; 是flex-wrap:和flex-direction:的综合写法。 */
        }
        
        .box3 {
            width: 900px;
            height: 200px;
            margin: 20px auto;
            border: deeppink 1px solid;
            box-sizing: border-box;
            display: flex;
            /* 设置父容器为伸缩盒子：会使每一个子元素自动变为伸缩项 */
        }
        
        .one {
            width: 200px;
            height: 200px;
            background-color: red;
            flex-grow: 2;
            /* flex-grow可以用来扩展子元素的宽度。设置当前元素应该占据剩余空间的比例值。
                计算方法：当前空间的flex-grow值/所有兄弟元素的flex-grow的值之和。
                 flex-grow的默认值是0，说明子元素并不会占据剩余的空间 */
        }
        
        .two {
            width: 200px;
            height: 200px;
            background-color: blue;
            flex-grow: 1;
        }
        
        .three {
            width: 200px;
            height: 200px;
            background-color: green;
            flex-grow: 0;
        }
        
        .box4 {
            width: 400px;
            height: 200px;
            margin: 20px auto;
            border: deeppink 1px solid;
            box-sizing: border-box;
            display: flex;
            /* 设置父容器为伸缩盒子：会使每一个子元素自动变为伸缩项 */
        }
        
        .one1 {
            width: 200px;
            height: 200px;
            background-color: red;
            flex-shrink: 1;
            /* flex-shrink可以用来收缩子元素的宽度。设置当前元素应该占据不足空间的比例值。
                计算方法：当前空间的flex-shrink值/所有兄弟元素的flex-shrink的值之和。
                 flex-shrink的默认值是1，说明子元素并不会收缩不足的空间（会溢出） */
        }
        
        .two2 {
            width: 200px;
            height: 200px;
            background-color: skyblue;
            flex-shrink: 1;
            align-self: flex-end;
            /* 单独给two2盒子设置了一个底对齐。 */
        }
        
        .three3 {
            width: 200px;
            height: 200px;
            background-color: green;
            flex-shrink: 2;
        }
        
        .box5 {
            width: 900px;
            height: 600px;
            margin: 20px auto;
            border: deeppink 1px solid;
            box-sizing: border-box;
            /* 设置父容器为伸缩盒子：会使每一个子元素自动变为伸缩项 */
            display: flex;
            /* 设置子元素在主轴方向上的排列方式。参数：center(让子元素从父元素的中间位置开始排列)，start(让子元素从父元素的开始位置开始排列)，end(让子元素从父元素的结束位置开始排列)，
                space-between(左右对齐父容器的开始和结束，中间平均分隔)，space-around(将多余的空间平均分隔在子元素的两边，相当于margin:0 auto)，
            */
            justify-content: space-around;
            /* 伸缩盒子的align-items属性：设置子元素（伸缩项）在侧轴方向上的对齐方式。 center居中，flex-start顶对齐，flex-end底对齐，stretch拉伸 */
            align-items: center;
        }
    </style>
</head>

<body>
    <div class="box">
        <div class="first">1（我们平均分配了剩余的空间，类似于在左右加了margin）</div>
        <div class="second">2</div>
        <div class="third">3</div>
        <div class="fourth">4</div>
    </div>

    <p>
        flex-low:row wrap; 是flex-wrap:和flex-direction:的综合写法
    </p>
    <div class="box2">
        <div class="first">1</div>
        <div class="second">2</div>
        <div class="third">3</div>
        <div class="fourth">4</div>
        <div class="fifth">5 现在是在垂直方向（列column）排列的。flex-direction: column;</div>
    </div>

    <p>
        flex-grow可以用来扩展子元素的宽度。设置当前元素应该占据剩余空间的比例值。 计算方法：当前空间的flex-grow值/所有兄弟元素的flex-grow的值之和。 flex-grow的默认值是0，说明子元素并不会占据剩余的空间
    </p>
    <div class="box3">
        <div class="one">1 （我占据了剩余空间的2倍）</div>
        <div class="two">2 （我占据了剩余空间的1倍）</div>
        <div class="three">3 （我没有占据剩余空间）</div>
    </div>

    <p>
        flex-shrink可以用来收缩子元素的宽度。设置当前元素应该占据剩余空间的比例值。 计算方法：当前空间的flex-shrink值/所有兄弟元素的flex-shrink的值之和。 flex-shrink的默认值是1，说明子元素并不会收缩不足的空间（会溢出）
    </p>
    <div class="box4">
        <div class="one1">1 （我收缩了1倍的不足空间）</div>
        <div class="two2">2（我收缩了1倍的不足空间）</div>
        <div class="three3">3（我收缩了2倍的不足空间）</div>
    </div>
    <p>
        伸缩盒子的align-items属性：设置子元素（伸缩项）在侧轴方向上的对齐方式。 center居中，flex-start顶对齐，flex-end底对齐，stretch拉伸
    </p>
    <div class="box5">
        <div class="one1">1 （我是居中对齐align-items: center;）</div>
        <div class="two2">2（在子元素中单独给这个盒子设置了一个底对齐align-self: flex-end;）</div>
        <div class="three3">3（我也是居中对齐align-items: center;）</div>
    </div>
</body>

</html>
